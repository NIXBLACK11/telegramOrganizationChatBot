about.txt

"NIMBLE" is a chatbot designed to assist customers of a bank. Its primary function is to provide customers with information about their accounts, including their balances, transaction history, and other relevant details. To access this information, "NIMBLE" asks customers for their login credentials, including their username and password.

In addition to providing account information, "NIMBLE" is also used to inform customers about the bank's new policies and services. For example, it shares information about new credit card offers or changes to interest rates. Its text would likely be professional and informative, providing customers with clear and accurate information.

To ensure that customers feel secure using "NIMBLE," the bot is equipped with strong security features. This could include two-factor authentication to verify users' identities, as well as encryption to protect their sensitive information. Overall, "NIMBLE" would be a valuable tool for customers looking to quickly access information about their accounts and stay informed about the latest developments at their bank.

@bank_detail_bot

NIMBLE is a bot that provides account info,policy updates and announcements.Access with login creds for quick assistance


from telegram.ext import CommandHandler, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
############################### Bot ############################################
def start(update, context):
  update.message.reply_text(main_menu_message(),
                            reply_markup=main_menu_keyboard())

def main_menu(update,context):
  query = update.callback_query
  query.answer()
  query.edit_message_text(
                        text=main_menu_message(),
                        reply_markup=main_menu_keyboard())

def first_menu(update,context):
  query = update.callback_query
  query.answer()
  query.edit_message_text(
                        text=first_menu_message(),
                        reply_markup=first_menu_keyboard())

def second_menu(update,context):
  query = update.callback_query
  query.answer()
  query.edit_message_text(
                        text=second_menu_message(),
                        reply_markup=second_menu_keyboard())

# and so on for every callback_data option
def first_submenu(bot, update):
  pass

def second_submenu(bot, update):
  pass